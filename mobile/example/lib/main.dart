// lib/main.dart

import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart'; // For Riverpod's ProviderScope
// Import the 'provider' package with a prefix to avoid name collision
import 'package:provider/provider.dart' as provider_pkg;

import 'firebase_options.dart'; // Make sure this file is generated by Firebase CLI
import 'app.dart';              // Your root UI widget (CameraAwesomeApp)

// Import ThemeProvider and its dependencies (assuming paths)
import 'features/theme/presenation/provider/theme_provider.dart';
// Import your service locator setup
import 'injection_container.dart' as di;

void main() async {
  // 1. Ensure Flutter bindings are initialized
  WidgetsFlutterBinding.ensureInitialized();

  // 2. Initialize your service locator (GetIt)
  await di.initServiceLocator();
  // 3. Initialize Firebase
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );

  // 4. Run the app with both ProviderScope (for Riverpod) and the prefixed ChangeNotifierProvider (for Provider)
  runApp(
    // ProviderScope is the root for Riverpod state management
    ProviderScope(
      child: 
          // Use the prefixed version for provider package's ChangeNotifierProvider
          provider_pkg.ChangeNotifierProvider<ThemeProvider>(
        create: (_) => ThemeProvider(
          // These dependencies are resolved by your service locator (sl)
          loadThemeUseCase: di.sl(),
          saveThemeUseCase: di.sl(),
          loadFontSizeUseCase: di.sl(),
          saveFontSizeUseCase: di.sl(),
        ),
        // CameraAwesomeApp is your main application widget, likely defined in app.dart
        // It will build the MaterialApp and define navigation, including access to ReferencePage
        child: const CameraAwesomeApp(),
      ),
    ),
  );
}
